{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","SearchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","e","target","value","fetch","then","response","json","users","FilteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wOAaeA,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,gCACI,6BAAKL,IACL,4BAAIC,WCaLK,EAnBA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIb,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCENC,G,MAZG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACAW,KAAK,SACLC,YAAY,gBACZZ,UAAU,mCACVa,SAAUH,QCPP,SAASI,EAAOC,GAC3B,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,QAASC,OAAO,mBAAxD,SACKJ,EAAMK,WCHZ,IAeQC,EAff,4MACIC,MAAM,CACFC,UAAU,GAFlB,kEAKQC,KAAKC,SAAS,CAACF,UAAU,MALjC,+BAQQ,OAAGC,KAAKF,MAAMC,SACH,wCAEJC,KAAKT,MAAMK,aAX1B,GAAmCM,aCsDpBC,E,kDA/CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEhB,YAAaoB,EAAEC,OAAOC,SAjBtC,EAAKT,MAAQ,CACTlB,OAAQ,GACRK,YAAa,IAJP,E,gEAQO,IAAD,OAChBuB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAErB,OAAQgC,S,+BAWrC,IAAD,EAC2BZ,KAAKF,MAA7BlB,EADH,EACGA,OAAQK,EADX,EACWA,YACV4B,EAAiBjC,EAAOkC,QAAO,SAAAlC,GAAY,OAAOA,EAAOP,KAAK0C,cAAcC,SAAS/B,EAAY8B,kBAEvG,OAAKnC,EAAOqC,OAMJ,sBAAKzC,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAC9B,cAACd,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAUV,OAAQiC,WAVnB,gD,GA7BDX,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b44fc34.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList=({robots}) => {\r\n    // if(true){\r\n    //     throw new Error('NOOOO')\r\n    // }\r\n    return(\r\n        <div>\r\n           {\r\n            robots.map((user ,i)=> {\r\n                return( \r\n                <Card \r\n                key={i} \r\n                id={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}/>\r\n            )})\r\n           }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({SearchField, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            type=\"search\" \r\n            placeholder='search robots' \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox","import React from 'react'\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div style={{overflowY:'scroll', height:'500px', border:'solid black 3px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport class ErrorBoundary extends Component {\r\n    state={\r\n        hasError: false\r\n    }\r\n    componentDidCatch(){\r\n        this.setState({hasError: true})\r\n    }\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>OOOOPS</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport './App.css'\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            SearchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json()\r\n            )\r\n            .then(users => this.setState({ robots: users })\r\n            )\r\n\r\n    }\r\n\r\n\r\n    onSearchChange = (e) => {\r\n        this.setState({ SearchField: e.target.value })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { robots, SearchField } = this.state\r\n        const FilteredRobots = robots.filter(robots => { return robots.name.toLowerCase().includes(SearchField.toLowerCase()) })\r\n\r\n        if (!robots.length) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else {\r\n            return (\r\n\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                    <ErrorBoundary>\r\n                    <CardList robots={FilteredRobots} />\r\n                    </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from './Containers/App.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}